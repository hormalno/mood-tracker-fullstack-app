name: Frontend CI/CD

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: mood-tracker-app/frontend
  CONTAINER_NAME: frontend-container
  ECS_SERVICE: frontend-task-service
  ECS_CLUSTER: mood-tracker-cluster
  ECS_TASK_DEFINITION: frontend-task

on:
  push:
    branches:
      - master
    paths:
      - 'frontend/**'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v4

      # Step 2: Log in to Amazon ECR
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Step 3: Build and Push Docker Image, output IMAGE_URI
      - name: Build and Push Docker Image
        id: build_image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          IMAGE_URI=$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:${IMAGE_TAG}
          docker build -t $IMAGE_URI -f frontend/Dockerfile frontend
          docker push $IMAGE_URI
          echo "::set-output name=image_uri::$IMAGE_URI"
        # For GitHub Actions >= v2, use environment file:
        # echo "image_uri=$IMAGE_URI" >> $GITHUB_ENV

      # Step 4: Render new ECS task definition with updated image
      - name: Render new ECS task definition
        id: task_def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build_image.outputs.image_uri }}

      # Step 5: Deploy new ECS task definition
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task_def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true