name: Frontend CI/CD

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: mood-tracker-app/frontend   # set this to your Amazon ECR repository name
  ECS_SERVICE: frontend-task-service          # set this to your Amazon ECS service name
  ECS_CLUSTER: mood-tracker-cluster           # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: frontend-task          # set this to the path to your Amazon ECS task definition

on:
  push:
    branches:
      - master
    paths:
      - 'frontend/**'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v4

      # Step 2: Log in to Amazon ECR
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Step 3: Build and Push Docker Image
      - name: Build and Push Docker Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          IMAGE_URI=$ECR_REGISTRY/mood-tracker-app/frontend:${IMAGE_TAG}
          docker build -t $IMAGE_URI -f frontend/Dockerfile frontend
          docker push $IMAGE_URI
          echo "IMAGE_URI=${IMAGE_URI}" >> $GITHUB_ENV
      
      # Step 4: Download current task definition
      - name: Download current ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      # Step 5: Register new revision
      - name: Register new ECS task definition revision
        run: |
          aws ecs register-task-definition \
            --cli-input-json file://new-task-definition.json

      # Step 6: Force ECS to use new revision
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true